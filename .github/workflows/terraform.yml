name: Deploy Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Nom de l'environnement (ex: staging, prod)"
        required: true
        default: "staging" # ou bien dev

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    name: Terraform Deploy to Azure

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_github_username: ${{ secrets.TF_VAR_GITHUB_USERNAME }}
      TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}
      STORAGE_ACCOUNT_NAME: stterraformstatebackend
      CONTAINER_NAME: tfstate
      RESOURCE_GROUP_NAME: rg-terraform-state

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Get Storage Account Key
        run: |
          set -euo pipefail
          ACCOUNT_KEY=$(az storage account keys list --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --account-name "${{ env.STORAGE_ACCOUNT_NAME }}" --query '[0].value' -o tsv)
          echo "::add-mask::$ACCOUNT_KEY"
          echo "ACCOUNT_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          set -euo pipefail
          terraform init \
            -input=false \
            -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.CONTAINER_NAME }}" \
            -backend-config="key=devops-cicd.${{ github.event.inputs.environment }}.tfstate" \
            -backend-config="access_key=${{ env.ACCOUNT_KEY }}" \
            -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}"

      - name: Select/Create Terraform Workspace
        run: |
          set -euo pipefail
          terraform workspace new "${{ github.event.inputs.environment }}" || terraform workspace select "${{ github.event.inputs.environment }}"

      # NEW: Import conditionnel du Diagnostic Setting existant (idempotent)
      - name: Ensure Diagnostic Setting tracked in state (import if needed)
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.environment }}"
          RG="rg-devopsskybrix-${ENV}"
          SERVER="psql-devopsskybrix-${ENV}"

          # Récupère l'ID du serveur PostgreSQL Flexible
          SERVER_ID="$(az postgres flexible-server show --resource-group "$RG" --name "$SERVER" --query id -o tsv)"
          echo "Server ID: $SERVER_ID"

          # Si déjà présent dans le state Terraform, ne rien faire
          if terraform state show azurerm_monitor_diagnostic_setting.postgresql > /dev/null 2>&1; then
            echo "Diagnostic setting déjà présent dans le state Terraform."
            exit 0
          fi

          # Vérifie s'il existe côté Azure (même nom que dans ton HCL)
          if az monitor diagnostic-settings show --resource "$SERVER_ID" --name "psql-monitoring" > /dev/null 2>&1; then
            echo "Diagnostic setting 'psql-monitoring' existe dans Azure → import dans le state…"
            terraform import azurerm_monitor_diagnostic_setting.postgresql "${SERVER_ID}|psql-monitoring"
          else
            echo "Aucun diagnostic setting 'psql-monitoring' existant dans Azure → Terraform le créera."
          fi

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var="environment=${{ github.event.inputs.environment }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment }}"

      - name: Save Terraform Outputs
        run: terraform output -json > tf_outputs.json

      #- name: Upload Terraform Outputs
       # uses: actions/upload-artifact@v4
        #with:
         
         # name: tf-outputs
          #path: tf_outputs.json

      # - name: Trigger Helm Deploy Workflow
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: helm-deploy.yml
      #     repo: Skybricks-DevOps/deployment
      #     inputs: '{ "environment": "${{ github.event.inputs.environment }}" }'
